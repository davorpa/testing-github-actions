name: CI/CD. Create React App

on:
  push:
    branches:
      # matches every branch that doesn't contain a '/'
#      - '*'
      # matches every branch containing a single '/'
#      - '*/*'
      # matches every branch
      - '**'
      # excludes master
#      - '!master'
      # includes one
#      - 'my-created-react-app'
    paths:
      # Include this workflow
      - '.github/workflows/ci.create-react-app.yml'
      # Include target folder
      - 'my-created-react-app/**'
  pull_request:
    branches:
      - '**'
    paths:
      - '.github/workflows/ci.create-react-app.yml'
      - 'my-created-react-app/**'
  # manual dispatch
  workflow_dispatch:


jobs:

  avoid_reduncy:
    runs-on: ubuntu-18.04
    steps:
      - name: Cancel Previous Redundant Builds
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

  build:
    name: Node ${{ matrix.node_version }} ${{ matrix.architecture }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - ubuntu-18.04
#          - ubuntu-20.04
#          - ubuntu-latest
#          - windows-latest
        node_version:
#          - 12.x
          - 14.x
#          - 16.x
        architecture:
          - x64
#        # an extra windows-x86 run:
#        include:
#          - os: windows-2016
#            node_version: 12
#            architecture: x86

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version:    ${{ matrix.node_version }}
          architecture:    ${{ matrix.architecture }}
          check-latest:    true
          # zero-config caching available using setup-node@v2
#          cache:           'npm'
        
      - name: Print node version
        run: node --version
      - name: Print npm version
        run: npm --version
#      - name: Upgrade npm
#        run:  npm install -g npm
#      - name: Print node version
#        run: node --version
#      - name: Print npm version
#        run: npm --version
      
      # Always after setup node/npm or use `actions/setup-node.with.cache: 'npm'`
      # verbose caching if using `actions/setup-node@v1`
      - name: Determine npm cache directory
        id:   npm-cache-dir
        run:  |
          echo "::set-output name=dir::$(npm config get cache)"

      - name: Handle npm cache
        uses: actions/cache@v2
        # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        id:   npm-cache
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
            ${{ runner.os }}-node-
            ${{ runner.os }}-

      - name: Print npm cache status
        env:
          NPM_CACHE_DIR: ${{ steps.npm-cache-dir.outputs.dir }}
          NPM_CACHE_HIT: ${{ steps.npm-cache.outputs.cache-hit }}
          RUNNER_OSPLAT: ${{ runner.os }}
        run: |
          echo $RUNNER_OSPLAT
          echo $NPM_CACHE_DIR
          echo $NPM_CACHE_HIT
        shell: bash

      - name: cwd
        uses: actions/github-script@v4
        with:
          result-encoding: string
          script: |
            const path = require('path');
            console.log("path: ", path.resolve('.'));
            console.log("CWD:  ", process.cwd());

      - name: Git status
        run: |
          echo "$(cd)"
          git status
          echo "$(cd)"
          ls -lAoghi1

      - name: Init React app project
        run: npx create-react-app my-created-react-app --use-npm

      - name: Git status
        run: |
          echo "$(cd)"
          git status
          echo "$(cd)"
          ls
          ls -laoghi1 my-created-react-app
        shell: bash
 
#      - name: Build React app project
#        working-directory: ./my-created-react-app
#        run: npm ci

#      - name: Git status
#        run: |
#          cd
#          git status
#        shell: bash
