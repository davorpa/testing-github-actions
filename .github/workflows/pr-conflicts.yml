name: "Detect PR merge conflicts"

on:
  # So that PRs touching the same files as the push are updated
  push:
  # So that the `dirtyLabel` is removed if conflicts are resolved
  # We recommend `pull_request_target` so that github secrets are available.
  # In `pull_request` we wouldn't be able to change labels of fork PRs
  pull_request_target:  # - A pull request
    types:              #   is...
      - opened          #   submitted
      - synchronize     #   or push more commits
      - reopened        #   or reopened after closed (no merged)

permissions:
  # no checkouts/branching needed
  contents: none
  # need by "eps1lon/actions-label-merge-conflict" to manage PR label/comments
  pull-requests: write

# This allows a subsequently queued workflow run to interrupt/wait for previous runs
concurrency:
  group: '${{ github.workflow }}'
  cancel-in-progress: false  # true: interrupt, false = wait for

jobs:
  detect-pr-conflicts:
    name: Detect
    runs-on: ubuntu-latest
    steps:

      - name: Check if open PRs are dirty
        id: checker
        uses: eps1lon/actions-label-merge-conflict@v2.0.1
        with:
          repoToken:  ${{ secrets.GITHUB_TOKEN }}
          retryAfter: 30 # seconds
          retryMax:   5  # atemps
          # pull_requests don't have access to secrets
          continueOnMissingPermissions: "${{ github.event != 'push' }}"
          dirtyLabel: conflicts
          commentOnDirty: |
            Oh no 😟! This Pull Request has merge conflicts.

            Please 🙏, [resolve dirty state](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/addressing-merge-conflicts/resolving-a-merge-conflict-on-github) before we can evaluate it.
          commentOnClean: |
            Great 🎉! Merge conflicts have been resolved.

            A maintainer will review your Pull Request as soon as possible.

            Thank you for your effort and patience ❤️.

      - name: Print outputs
        run: echo ${{ join(steps.checker.outputs.*, ',') }}

      - name: Set PRs outputs
        id: set-prs
        run: |
          echo "$INPUT_PRS"  \
            | jq --compact-output --raw-output 'to_entries | map({number: .key, dirty: .value})'  \
            | sed -e 's/^/::set-output name=prs::/'
          echo "$INPUT_PRS"  \
            | jq --raw-output 'to_entries | length'  \
            | sed -e 's/^/::set-output name=prs-len::/'
        env:
          INPUT_PRS: ${{ steps.checker.outputs.prDirtyStatuses }}

      - name: Write job summary
        run: |
          echo "### Pull Request statuses"  \
            >> $GITHUB_STEP_SUMMARY
          # render json array to a Markdown table with an optional "No records" message if empty
          echo "$INPUT_PRS"  \
            | jq --raw-output 'map("| [#\(.number)](\(env.GITHUB_PUBLIC_URL)/\(.number)) | \(if (.dirty) then "❌" else "✔️" end) |") | join("\n") | if (. == "") then "\nNo records.\n" else "\n| PR | Mergeable? |\n|---:|:----------:|\n\(.)\n" end'  \
            >> $GITHUB_STEP_SUMMARY
        env:
          GITHUB_PUBLIC_URL:   ${{ format('{0}/{1}/pull', github.server_url, github.repository) }}
          INPUT_PRS: ${{ steps.set-prs.outputs.prs }}
